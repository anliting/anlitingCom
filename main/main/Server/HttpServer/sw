let
    version='1',
    db=new Promise(rs=>{
        let openReq=indexedDB.open('')
        openReq.onsuccess=e=>{
            rs(openReq.result)
        }
        openReq.onupgradeneeded=e=>{
            openReq.result.createObjectStore('logIn')
        }
    }),logInFlow=(async()=>{
        db=await db
    })()
function cutLogIn(){
    return new Promise(rs=>{
        let transaction=db.transaction('logIn','readwrite')
        transaction.objectStore('logIn').delete(0)
        transaction.oncomplete=rs
    })
}
function getLogIn(){
    return new Promise(rs=>{
        let transaction=db.transaction('logIn','readwrite')
        let r=transaction.objectStore('logIn').get(0)
        transaction.oncomplete=e=>rs(r.result)
    })
}
function putLogIn(credential){
    return new Promise(rs=>{
        let transaction=db.transaction('logIn','readwrite')
        transaction.objectStore('logIn').put(credential,0)
        transaction.oncomplete=rs
    })
}
onactivate=e=>{
    e.waitUntil(clients.claim())
}
onfetch=e=>{
    let cache=caches.open(version),c=(async()=>{
        cache=await cache
        return cache.match(e.request)
    })()
    e.respondWith((async()=>{
        let res
        try{
            res=await fetch(e.request.clone())
        }catch(e){
            return c
        }
        e.waitUntil((async()=>{
            cache=await cache
            cache.put(e.request,res)
        })())
        return res.clone()
    })())
}
onmessage=e=>{
    switch(e.data[0]){
        case'getLogIn':
            e.waitUntil(logInFlow=(async()=>{
                await logInFlow
                let logIn=await getLogIn()
                if(logIn)
                    e.source.postMessage(['logIn',...logIn])
            })())
        break
        case'logIn':
            e.waitUntil(logInFlow=(async()=>{
                await logInFlow
                await Promise.all([
                    putLogIn(e.data.slice(1)),
                    (async()=>{
                        let client=await clients.matchAll()
                        client.map(c=>{
                            c.postMessage(e.data)
                        })
                    })(),
                ])
            })())
        break
        case'logOut':
            e.waitUntil(logInFlow=(async()=>{
                await logInFlow
                await Promise.all([
                    cutLogIn(e.data.slice(1)),
                    (async()=>{
                        let client=await clients.matchAll()
                        client.map(c=>{
                            c.postMessage(e.data)
                        })
                    })(),
                ])
            })())
        break
    }
}
oninstall=e=>{
    skipWaiting()
    e.waitUntil((async()=>{
        let cache=await caches.open(version)
        await cache.addAll(['.'])
    })())
}
